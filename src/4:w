#include <iostream> 
#include "dcel.h"
#include "vertex.h"
#include "halfEdge.h"
#include "sweepline.h"
#include "eventqueue.h" 
#include "eventI.h"
#include "config.h"
#include "GL/glut.h"
#include "render.h"
#include "genran.h"
#include "face.h"
#include "iomanip"
Dcel canvas;




void init(int a) {
    
    std::vector<std::pair<double,double>> p11 ={
         {-5, 5}, {-5, -5}, {5, -5}, {5, 5}

    };
    std::vector<std::pair<double,double>> p21 ={
        {-0.5, 1.2}, {-1.1, -0.12}, {1.1, -0.2}, {1, 1}
    };
    std::vector<std::pair<double,double>> p22 ={
        {-0.5, 1.9}, {-2.1, -2}, {2.1, -2}, {2, 2.1}
    };
 std::vector<std::pair<double,double>> p23 ={
        {-0.5, -0.2}, {-1.1, -1}, {1.1, -1}, {1, -0.4}
    };
   std::vector<std::pair<double,double>> p1 = {
        {-5, 5}, {-5, -5}, {5, -5}, {5, 5}   
   };

    std::vector<std::pair<double,double>> p2 = {
      {-0.14821, 1.24908},
{-0.10788, 0.52315},
{4.35565, -0.15426},
{4.21462, 1.41431},
{5.1232, 0.96701},
{7.01397, 1.25051},
{8.19656, 1.57691},
{7.56058, 2.68343},
{7.49144, 3.61112},
{4.62072, 3.88452},
{4.72733, 6.87142},
{3.75215, 4.60556},
{3.33753, 4.98092},
{0.17217, 5.22106},
{2.38096, 3.79234},
{1.98598, 3.9728} };      
    //p1 =  Random::getRandPolygon(17);
    //p2 =  Random::getRandPolygon(16);
    //p21 =  Random::getRandPolygon(8);



    Dcel d1(p1);
    Dcel d2(p2);
   for (const auto& v : d1.getVertex()) {
       std::cout << "{" << v->getX() << ", " << v->getY() << "},\n";
   }
   std::cout << "\n";

   for (const auto& v : d2.getVertex()) {
       std::cout << "{" << v->getX() << ", " << v->getY() << "},\n";
   }
  d1.setHoles(p21);
   //d1.setHoles(p23);
   // d1.triang();
    Dcel::merge(d1, d2);
    d1.triang();
    canvas.copy(d1);
    

    //canvas.print();
}


void display() {
    glClearColor(0.08f, 0.09f, 0.12f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    Render::render(canvas);
    glutSwapBuffers();
}

int main(int argc, char** argv) {



    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(1000, 1000);
    glutCreateWindow("DCEL Viewer");
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    double a = 10;
    gluOrtho2D(-a, a, -a, a); 
    glMatrixMode(GL_MODELVIEW);
    init(a);
    glutDisplayFunc(display);
    

    glutMainLoop();
}
